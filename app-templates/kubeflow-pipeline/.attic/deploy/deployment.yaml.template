apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: webapp-{{MODEL_NAME}}
      prefix: /webapp-{{MODEL_NAME}}/
      rewrite: /
      timeout_ms: 1200000
      service: {{MODEL_NAME}}-webappsvc.{{NAMESPACE}}:80
  name: "{{MODEL_NAME}}-webappsvc"
  labels:
    app: "{{MODEL_NAME}}"
    role: frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: "http-server"
  selector:
    app: "{{MODEL_NAME}}"
    role: frontend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{MODEL_NAME}}-webapp"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{MODEL_NAME}}"
        role: frontend
    spec:
      containers:
      - name: "{{MODEL_NAME}}-webapp"
        image: "{{DOCKER_REGISTRY}}/library/webapp:{{DOCKER_TAG}}"
        # resources:
        #   limits:
        #     nvidia.com/gpu: 1
        imagePullPolicy: Always
        env:
        - name: TFSERVING_HOST
          value: "ghsumm-github-issue-summarization-h65dg.{{NAMESPACE}}"
        - name: TF_SERVABLE_NAME
          value: "ghsumm-github-issue-summarization-h65dg"
        - name: GH_TOKEN
          value: "{{GITHUB_TOKEN}}"
        - name: DATADIR
          value: "gs://aju-dev-demos-codelabs/kubecon/t2t_data_gh_all/"
        # - name: S3_REGION
        #   value: "{{S3_REGION}}"
        # - name: AWS_REGION
        #   value: "{{S3_REGION}}"
        # - name: AWS_ACCESS_KEY_ID
        #   valueFrom:
        #     secretKeyRef:
        #       key: access_key
        #       name: "{{AWS_SECRET}}"
        # - name: AWS_SECRET_ACCESS_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       key: secret_key
        #       name: "{{AWS_SECRET}}"
        # - name: S3_USE_HTTPS
        #   value: '1'
        # - name: S3_VERIFY_SSL
        #   value: '0'
        # - name: S3_ENDPOINT
        #   value: '{{S3_ENDPOINT}}'
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /secret/gcp-credentials/user-gcp-sa.json
        volumeMounts:
        - name: gcp-credentials
          mountPath: /secret/gcp-credentials
        ports:
        - name: http-server
          containerPort: 8080
        resources:
          limits:
            cpu: "1"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 1Gi
      volumes:
        - name: gcp-credentials
          secret:
            secretName: user-gcp-sa