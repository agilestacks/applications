{"version":3,"sources":["components/Layer/Layer.jsx","components/CubeEx/CubeEx.jsx","components/Teaser/Teaser.jsx","App.js","serviceWorker.js","index.js"],"names":["Tile","color","props","className","classNames","Layer","name","height","colors","onToggleKeyword","range","map","i","key","top","onMouseEnter","right","left","CubeEx","tags","HISTORY_LIMIT","Math","floor","length","Teaser","useState","sampleSize","keywords","setKeywords","history","setHistory","useCallback","debounce","nextKeyword","sample","difference","slice","nextKeywords","nextIndex","random","KEYWORDS_LENGTH","splice","keyword","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWAKMA,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAUC,EAAZ,gCACT,uCACIC,UACIC,IACI,WADM,kCAGWH,GAAUA,KAI/BC,KAICG,EAAQ,SAAC,GAAD,IAAEF,EAAF,EAAEA,UAAWG,EAAb,EAAaA,KAAb,IAAmBC,cAAnB,MAA4B,EAA5B,MAA+BC,cAA/B,MAAwC,GAAxC,EAA4CC,EAA5C,EAA4CA,gBAA5C,OACjB,yBACIN,UAAWC,IACP,YACAD,EAFiB,kCAIAG,GAASA,KAI9B,yBAAKH,UAAU,qCAEPO,gBAAM,EAAG,GACJC,KAAI,SAAAC,GAAC,OACF,kBAAC,EAAD,CACIC,IAAG,eAAUD,GACbX,MAAOO,EAAOM,IACdC,aAAcN,QAKlC,yBAAKN,UAAU,uCAEPO,gBAAM,EAAG,EAAIH,GACRI,KAAI,SAAAC,GAAC,OACF,kBAAC,EAAD,CACIC,IAAG,eAAUD,GACbX,MAAOO,EAAOQ,MACdD,aAAcN,QAKlC,yBAAKN,UAAU,sCAEPO,gBAAM,EAAG,EAAIH,GACRI,KAAI,SAAAC,GAAC,OACF,kBAAC,EAAD,CACIC,IAAG,eAAUD,GACbX,MAAOO,EAAOS,KACdF,aAAcN,UCnD7BS,EAAS,SAAC,GAAuB,IAAtBT,EAAqB,EAArBA,gBAEpB,OACI,yBAAKN,UAAU,eACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,qCACX,kBAAC,EAAD,CACIK,OAAQ,CACJM,IAVP,SAWOG,KAZT,OAaSD,MAfV,OAiBMP,gBAAiBA,KAGzB,yBAAKN,UAAU,qCACX,kBAAC,EAAD,CACII,OAAQ,EACRC,OAAQ,CACJM,IAvBR,QAwBQG,KAvBT,OAwBSD,MA1BV,OA4BMP,gBAAiBA,Q,sBC5BnCU,EAAO,CACT,OAAQ,YAAa,aAAc,MAAO,MAAO,QAAS,YAAa,SAAU,QAAS,QAAS,SAEjGC,EAAgBC,KAAKC,MAAoB,GAAdH,EAAKI,QAGzBC,EAAS,WAAO,IAAD,EACQC,mBAASC,qBAAWP,EAHhC,IAEI,mBACjBQ,EADiB,KACPC,EADO,OAEMH,mBAASE,GAFf,mBAEjBE,EAFiB,KAERC,EAFQ,KAIlBrB,EAAkBsB,sBAAYC,oBAChC,WACI,IAAMC,EAAcC,iBAAOC,qBAAWhB,EAAD,sBAAWU,GAAX,YAAuBF,MAC5DG,EACI,CACIG,GADJ,mBAEOJ,IACLO,MAAM,EAAGhB,IAEf,IAAMiB,EAAeV,EAChBS,QAECE,EAAYC,iBAAOC,GAEzBH,EACKI,OACGH,EACA,EACAL,GAGRL,EAAYS,KAEhB,KACD,CAACV,EAAUE,EAASV,EAAMS,EAAaE,EAAYV,EA9BlC,IA+BpB,OACI,yBAAKjB,UAAU,cACX,oCAAS,0BAAMA,UAAU,qBAAhB,WACT,yBAAKA,UAAU,uBAEPwB,EAAShB,KAAI,SAAC+B,GAAD,OACT,wBAAI7B,IAAK6B,EAASvC,UAAU,sBAAsBuC,OAI9D,6CACA,kBAAC,EAAD,CAAQjC,gBAAiBA,MCpCtBkC,MAVf,WACE,OACE,yBAAKxC,UAAU,OACb,4BAAQA,UAAU,cACd,kBAAC,EAAD,SCIUyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8185038.chunk.js","sourcesContent":["import React from 'react';\nimport { range } from 'lodash';\nimport classNames from 'classnames';\n\n\nconst Tile = ({color, ...props}) => (\n    <div\n        className={\n            classNames(\n                'asi-tile',\n                {\n                    [`asi-tile-${color}`]: color\n                }\n            )\n        }\n        {...props}\n    />\n)\n\nexport const Layer = ({className, name, height = 1, colors = {}, onToggleKeyword}) => (\n    <div\n        className={classNames(\n            'asi-layer',\n            className,\n            {\n                [`as-layer-${name}`]: name\n            }\n        )}\n    >\n        <div className=\"asi-layer-face asi-layer-face-top\">\n            {\n                range(0, 9)\n                    .map(i => (\n                        <Tile\n                            key={`tile-${i}`}\n                            color={colors.top}\n                            onMouseEnter={onToggleKeyword}\n                        />\n                    ))\n            }\n        </div>\n        <div className=\"asi-layer-face asi-layer-face-right\">\n            {\n                range(0, 3 * height)\n                    .map(i => (\n                        <Tile\n                            key={`tile-${i}`}\n                            color={colors.right}\n                            onMouseEnter={onToggleKeyword}\n                        />\n                    ))\n            }\n        </div>\n        <div className=\"asi-layer-face asi-layer-face-left\">\n            {\n                range(0, 3 * height)\n                    .map(i => (\n                        <Tile\n                            key={`tile-${i}`}\n                            color={colors.left}\n                            onMouseEnter={onToggleKeyword}\n                        />\n                    ))\n            }\n        </div>\n    </div>\n)","import React from 'react';\n\nimport { Layer } from '../Layer';\n\nconst COLOR_RED = 'red';\nconst COLOR_GREEN = 'green';\nconst COLOR_BLUE = 'blue';\nconst COLOR_ORANGE = 'orange'\n\nexport const CubeEx = ({onToggleKeyword}) => {\n\n    return (\n        <div className=\"asi-cube-ex\">\n            <div className=\"asi-cube-ex-parts\">\n                <div className=\"asi-cube-ex-part asi-cube-ex-roof\">\n                    <Layer\n                        colors={{\n                            top: COLOR_ORANGE,\n                            left: COLOR_BLUE,\n                            right: COLOR_RED\n                        }}\n                        onToggleKeyword={onToggleKeyword}\n                    />\n                </div>\n                <div className=\"asi-cube-ex-part asi-cube-ex-base\">\n                    <Layer\n                        height={2}\n                        colors={{\n                            top: COLOR_GREEN,\n                            left: COLOR_BLUE,\n                            right: COLOR_RED\n                        }}\n                        onToggleKeyword={onToggleKeyword}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { useState, useCallback } from 'react';\nimport { CubeEx } from '../CubeEx';\nimport { sampleSize, sample, difference, debounce, random } from 'lodash';\n\nconst tags = [\n    'helm', 'kustomize', 'kubernetes', 'aws', 'gcp', 'azure', 'terraform', 'docker', 'shell', 'vault', 'istio'\n];\nconst HISTORY_LIMIT = Math.floor(tags.length * .7);\nconst KEYWORDS_LENGTH = 3;\n\nexport const Teaser = () => {\n    const [keywords, setKeywords] = useState(sampleSize(tags, KEYWORDS_LENGTH));\n    const [history, setHistory] = useState(keywords);\n\n    const onToggleKeyword = useCallback(debounce(\n        () => {\n            const nextKeyword = sample(difference(tags, [...history, ...keywords]));\n            setHistory(\n                [\n                    nextKeyword,\n                    ...history\n                ].slice(0, HISTORY_LIMIT)\n            );\n            const nextKeywords = keywords\n                .slice();\n\n            const nextIndex = random(KEYWORDS_LENGTH - 1);\n\n            nextKeywords\n                .splice(\n                    nextIndex,\n                    1,\n                    nextKeyword\n                );\n\n            setKeywords(nextKeywords);\n        },\n        100\n    ), [keywords, history, tags, setKeywords, setHistory, HISTORY_LIMIT, KEYWORDS_LENGTH]);\n    return (\n        <div className=\"asi-teaser\">\n            <h1>Agile<span className=\"asi-teaser-stacks\">Stacks</span></h1>\n            <div className=\"asi-teaser-keywords\">\n                {\n                    keywords.map((keyword) => (\n                        <h2 key={keyword} className=\"asi-teaser-keyword\">{keyword}</h2>\n                    ))\n                }\n            </div>\n            <div>with no pain</div>\n            <CubeEx onToggleKeyword={onToggleKeyword} />\n        </div>\n    )\n}","import React from 'react';\nimport './App.scss';\n\nimport { Teaser } from './components';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Teaser />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}