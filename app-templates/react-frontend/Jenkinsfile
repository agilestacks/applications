pipeline {
  triggers {
    githubPush()
    pollSCM('H/15 * * * *')
  }
  parameters {
    string( name: 'APPLICATION_NAME',
            defaultValue: "${env.JOB_BASE_NAME}",
            description: 'S3 bucket where application distribution must be published'
          )
    string( name: 'DOMAIN_NAME',
            defaultValue: "${env.DOMAIN_NAME}",
            description: 'S3 bucket where application distribution must be published'
          )
    string( name: 'CONTEXT_PATH',
            defaultValue: '',
            description: 'Current stack state file location'
          )
    string(
          name: 'AWS_TRUST_ROLE',
          defaultValue: env.DEPLOY_ROLE_ARN,
          description: "Role to assume for to deploy application"
      )
    booleanParam(
          name: 'CLEAN_WORKSPACE',
          defaultValue: false,
          description: 'Start with empty workspace'
      )
  }
  agent {
    kubernetes {
      inheritFrom 'toolbox'
      label 'pod'
      containerTemplate(
        name: 'buildbox',
        image: 'node:10.6',
        ttyEnabled: true,
        command: 'cat'
      )
    }
  }
  stages {
    stage('Init') {
      steps {
        script {
          if (params.CLEAN_WORKSPACE) {
            echo "Wiping out workspace"
            deleteDir()
          } else {
            echo 'Skipping cleanup due to user setting'
          }
        }
      }
    }
    stage('Checkout') {
      steps {
        checkout scm
        // git credentialsId: 'asibot', url: 'https://github.com/agilestacks/applications.git'
      }
    }
    stage('Deploy Components') {
      environment {
        HUB_DEBUG = '1'
      }
      steps {
        container('toolbox') {
          script {
            hub.elaborate(state: params.STATE_FILE)
            hub.deploy()
          }
        }
      }
    }
    stage('Build') {
      environment {
        CONTEXT_PATH = "${params.CONTEXT_PATH}"
        APPLICATION_REPOSITORY = "${git.remote}"
        APPLICATION_BRANCH = "${git.branch}"
      }
      steps {
        container('buildbox') {
          sh script: 'npm install'
          sh script: 'npm run junit:test'
          sh script: 'npm run build'
        }
      }
    }
    stage('Lint') {
      steps {
        container('buildbox') {
          script {
            try {
              sh script: 'npm run junit:lint'
            } catch (err) {
              currentBuild.result = 'UNSTABLE'
              currentBuild.description = 'Found lint violations'
            }
          }
        }
      }
    }
    stage('Deploy Application') {
      steps {
        container('toolbox') {
          script {
            final bucket = hub.explain().stackOutputs['application.bucket'] as String
            withAWS(role:params.AWS_TRUST_ROLE) {
              sh script: "aws s3 sync --delete dist/ s3://${bucket}/${params.CONTEXT_PATH}"
            }
          }
        }
      }
    }
  }
  post {
    always {
      junit testResults: './tests-*.xml', allowEmptyResults: true
    }
    changed {
      catchError {
        slackSend color: slack.buildColor, message: slack.buildReport
      }
    }
  }
}
