#!/usr/bin/env groovy

@Library('agilestacks') _

properties([
        parameters([
                string(name: 'APP_NAME', defaultValue: '${name}', description: 'Name of the app to be used inside kubernetes'),
                string(name: 'APP_URL', defaultValue: "${url}.$${env.INGRESS_FQDN}", description: 'External URL where current app will be accessible'),
                string(name: 'NAMESPACE', defaultValue: '${namespace}', description: 'Namespace where container will be deployed'),
                string(name: 'REPLICAS', defaultValue:  '${replicas}', description: 'Number of pod replicas'),
        ]),
        pipelineTriggers([
                [$class: 'GitHubPushTrigger'],
                pollSCM('H/15 * * * *')
        ])
])

node('master') {
    stage('Checkout') {
        checkout scm
    }
}

podTemplate(
        inheritFrom: 'toolbox',
        label: 'kubernetes',
        containers: [
                containerTemplate(
                        name: 'nodejs',
                        image: 'nodejs:8.11.1',
                        ttyEnabled: true,
                        command: 'cat'
                )
        ]
) {
    node('kubernetes') {
        container('nodejs') {
            stage("Test") {
                sh script: 'npm install test'
            }
        }
        container('toolbox') {
            def outputs
            stage('Prepare dependencies') {
                def creds = assumeDeployerRole(env.DEPLOY_ROLE_ARN)

                def log = sh(script: """
                    export AWS_ACCESS_KEY_ID=$${creds.accessKey}
                    export AWS_SECRET_ACCESS_KEY=$${creds.secretKey}
                    export AWS_SESSION_TOKEN=$${creds.sessionToken}

                    hub pull ./hub-application.yaml
                    hub --aws_region $${env.STATE_REGION} elaborate ./hub-application.yaml \
                        -s s3://$${env.STATE_BUCKET}/$${env.DOMAIN_NAME}/hub/happy-meal/hub.state
                    hub deploy ./hub.yaml.elaborate
                """, returnStdout: true)

                outputs = parseHubOutputs(log)
            }

            def dockerImage = outputs['nodejs-application:component.ecr.image']
            def commit = commitHash.shortHash()
            def images = [ "$dockerImage:$commit", "$dockerImage:latest" ]

            stage('Build') {
                sh script: """
                    docker build --pull \
                         --rm \
                         $${images.collect{"--tag $it"}.join(' ')} .
                """
            }
            stage('Push') {
                ecr.login()
                def pushImages = images.collectEntries{ [it: { sh script: "docker push $it" }]}

                parallel pushImages
            }

            def template = readFile 'deployment.yaml'
            def deployment = render.template template, [
                    app:            params.APP_NAME,
                    namespace:      params.NAMESPACE,
                    replicas:       params.REPLICAS,
                    host:           params.APP_URL,
                    image:          "$dockerImage:$commit",
                    version:        gradleProps['version']
            ]
            stage('Deploy') {
                sh script: "hub --aws_region $${env.STATE_REGION} kubeconfig s3://$${env.STATE_BUCKET}/$${env.DOMAIN_NAME}/hub/happy-meal/hub.state"

                writeFile file: "deployment-build-$${currentBuild.number}.yaml", text: deployment
                def exists = sh returnStatus: true, script: "kubectl -n $${params.NAMESPACE} get -f deployment-build-$${currentBuild.number}.yaml"
                try {
                    if (exists == 0) {
                        sh script: "kubectl -n $${params.NAMESPACE} set image --record deployment/$${params.APP_NAME} '$${params.APP_NAME}=$${dockerImage}:$commit'"
                    } else {
                        sh script: "kubectl -n $${params.NAMESPACE} apply --force --record -f deployment-build-$${currentBuild.number}.yaml"
                    }
                    sh script: "kubectl -n $${params.NAMESPACE} rollout status -w 'deployment/$${params.APP_NAME}'"
                } catch(err) {
                    sh script: """
            kubectl -n $${params.NAMESPACE} rollout undo 'deployment/$${params.APP_NAME}'
            kubectl -n $${params.NAMESPACE} rollout status -w 'deployment/$${params.APP_NAME}'
          """

                    error message: """
            Failed to deploy $${params.APP_NAME} with container $dockerImage:$commit \n
            We rolled back unsuccessful deployment
          """
                }
            }
        }
        stage('Validate') {
            retry(20) {
                sleep 1
                def resp = httpRequest url: "http://$${params.APP_URL}"
                echo resp.content
                assert resp.status == 200
            }
        }
    }
}
